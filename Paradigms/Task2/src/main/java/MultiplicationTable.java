/**
 *     Условие
 *     На вход подается число n.
 *     ● Задача
 *     Написать скрипт в любой парадигме, который выводит на экран таблицу умножения всех чисел от 1 до n.
 *     Обоснуйте выбор парадигм.
 *     ● Пример вывода:
 *     1 * 1 = 1
 *     1 * 2 = 2
 *     1 * 3 = 3
 *     1 * 4 = 4
 *     1 * 5 = 5
 *     1 * 6 = 6
 *     ..
 *     1 * 9 = 9
 */
public class MultiplicationTable {

    /**
     * Поставленная задача решена в структурной парадигме
     * - такой выбор обусловлен простотой задачи,
     * малой вероятностью
     * появления необходимости переиспользования кода
     * и/или распараллеливания вычислений.
     * Тем не менее сама формулировка задачи предполагает что скрипт,
     * это некая процедура, которая будет вызываться извне, что характеризует процедурную парадигму.
     * Можно сказать что здесь эти пар-мы идут бок о бок, как это зачастую и бывает.
     * @param n
     */
    public static void printMultiplicationTable(int n) {
        if (n <= 0)
            return;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                System.out.printf("%d * %d = %d\n", i, j, i*j);
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        printMultiplicationTable(5);
    }
}
